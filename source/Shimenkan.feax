@MARKTONES = [u16F91 u16F92];
@ALLTONES = [u16F8F u16F90 @MARKTONES];
@VOWELS = @cno_mark;
#@VOWEL_DESC = [u16F5F.mark u16F63.mark u16F64.mark u16F69.mark];
@VOWEL_DESC = [u16F63.mark u16F64.mark];
@VOWEL_TALL = [u16F5B u16F5C u16F5E u16F5F u16F60 u16F73 u16F74 u16F7D u16F7E u16F7F u16F80 u16F85];
@ASPMARKS = [u16F51.mark u16F52.mark];
@ASPALLMARKS = [@ASPMARKS u16F53.mark];
@ASP = [u16F51 u16F52];
@ASPALL = [@ASP u16F53];
@OPENFLOOR = [u16F07 u16F08 u16F09 u16F0A u16F0B u16F0C u16F0D u16F37 u16F38 u16F48 u16F49];
@OPENWAIST = [u16F07 u16F0E u16F0F u16F10 u16F11 u16F12 u16F16 u16F17 u16F2E u16F2F u16F30 u16F32 u16F47 u16F48 u16F4A];
@NMARKTONES = [@F u16F8F u16F90 @ASPALLMARKS @_H];

#@GHHAVOWELS = [u16F54.mark u16F56.mark u16F57.mark u16F58.mark u16F59.mark u16F5A.mark
#               u16F5B.mark u16F5C.mark u16F5D.mark u16F5E.mark u16F5F.mark u16F60.mark u16F61.mark u16F62.mark u16F63.mark u16F66.mark
#               u16F67.mark u16F68.mark u16F6A.mark u16F71.mark u16F72.mark u16F73.mark u16F74.mark u16F75.mark u16F76.mark u16F77.mark
#               u16F78.mark u16F79.mark u16F7A.mark u16F7B.mark u16F7C.mark u16F7D.mark u16F7E.mark u16F7F.mark u16F80.mark u16F81.mark
#               u16F82.mark u16F83.mark u16F84.mark u16F85.mark u16F86.mark];
@GHHAVOWELS = [u16F55.mark u16F64.mark u16F65.mark u16F69.mark u16F6B.mark u16F6C.mark u16F6D.mark u16F6E.mark
               u16F6F.mark u16F70.mark u16F87.mark];

@UANCONS = [u16F00 u16F01 u16F04 u16F05 u16F07 u16F0A u16F0D u16F12 u16F16 u16F1E u16F1F u16F26 u16F28 u16F29 u16F2C u16F2E
            u16F21 u16F33 u16F35 u16F37 u16F38 u16F39 u16F3A u16F43 u16F44 u16F46];

@L_4F = [u16F0E_u16F4F u16F10_u16F4F];
@L_no4F = [u16F0E u16F10];

do  let c = feaclass("W");
    let subc = filter(lambda g: int(re.sub(r"^u([0-9a-fA-F]+)([._].*)?$", r"\1", g), 16) < 0x16F51, c);
    let l = " ".join(subc);
    { @Cons = [ $l ]; }

lookup error_circle {
    sub u16F51 by circledotted u16F51;
    sub u16F52 by circledotted u16F52;
    sub u16F53 by circledotted u16F53;
} error_circle;

lookup error_check {
    ignore sub @Cons [@ASP u16F53]' @Cons;
    sub [@ASP u16F53]' lookup error_circle @Cons;
} error_check;

lookup hide_tones {
    sub @c_visible by @cno_visible;
} hide_tones;

lookup vowel_marks {
    sub @cno_mark by @c_mark;
} vowel_marks;

lookup asp_marks {
    sub @ASP by @ASPMARKS;
    sub u16F53 by u16F53.mark;
} asp_marks;

lookup asp_vowel_vowel {
    sub u16F51 @cno_mark by @c_mark;
    sub u16F52 @cno_mark by @c_mark;
    sub u16F53 @cno_mark by @c_mark;
} asp_vowel_vowel;

lookup asp_tone_asp {
    sub u16F51 @MARKTONES by u16F51;
    sub u16F52 @MARKTONES by u16F52;
    sub u16F53 @MARKTONES by u16F53;
} asp_tone_asp;

lookup tone_t_asp1_t {
    sub u16F91 by u16F91 u16F51 u16F91;
    sub u16F92 by u16F92 u16F51 u16F92;
} tone_t_asp1_t;

lookup tone_t_asp2_t {
    sub u16F91 by u16F91 u16F52 u16F91;
    sub u16F92 by u16F92 u16F52 u16F92;
} tone_t_asp2_t;

lookup tone_t_asp3_t {
    sub u16F91 by u16F91 u16F53 u16F91;
    sub u16F92 by u16F92 u16F53 u16F92;
} tone_t_asp3_t;

lookup lig_4F {
    sub @L_no4F u16F4F by @L_4F;
} lig_4F;


# Break after tone. There are two cursive attachment behaviours. In the first you
# mark the first base and it attaches forward. In the second you apply the lookup to
# the second and it attaches back to the first. If a type 2 lookup reference is executed
# in a type 1 machine, then a future character may be pulled in to attach to us, rather
# than we attach to something else. We insert a block to stop this.
@NonAttaches = [u16F8F u16F90 u16F91 u16F92];
lookup block_W {
    sub @NonAttaches by @NonAttaches ZWNBS;
    sub @W by @W ZWNBS;
} block_W;

lookup block_W_context {
    sub @NonAttaches' lookup block_W @Cons;
    sub @W' lookup block_W @Cons @WB @MARKTONES;
    sub @W' lookup block_W @Cons @WB @WB @MARKTONES;
    sub @W' lookup block_W @Cons @WB @WB @WB @MARKTONES;
} block_W_context;

lookup choose_vowel_marks_sfm {
    # ASP is spacing for shoulder
    ignore sub @ASP' @cno_mark @cno_mark @cno_mark u16F90;
    ignore sub @ASP' @cno_mark @cno_mark u16F90;
    ignore sub @ASP' @cno_mark u16F90;
    ignore sub @ASP' @cno_mark @cno_mark @cno_mark u16F8F;
    ignore sub @ASP' @cno_mark @cno_mark u16F8F;
    ignore sub @ASP' @cno_mark u16F8F;
    ignore sub u16F52' @cno_mark u16F92;
    ignore sub u16F52' @cno_mark @cno_mark u16F92;
    ignore sub u16F52' @cno_mark @cno_mark @cno_mark u16F92;
    # ASP is spacing and comes after mark vowels
    sub u16F51' lookup asp_vowel_vowel @cno_mark' lookup vowel_marks @cno_mark' lookup vowel_marks @cno_mark' lookup tone_t_asp1_t u16F91' lookup asp_tone_asp;
    sub u16F51' lookup asp_vowel_vowel @cno_mark' lookup vowel_marks @cno_mark' lookup tone_t_asp1_t u16F91' lookup asp_tone_asp;
    sub u16F51' lookup asp_vowel_vowel @cno_mark' lookup tone_t_asp1_t u16F91' lookup asp_tone_asp;
    sub u16F52' lookup asp_vowel_vowel @cno_mark' lookup vowel_marks @cno_mark' lookup vowel_marks @cno_mark' lookup tone_t_asp2_t u16F91' lookup asp_tone_asp;
    sub u16F52' lookup asp_vowel_vowel @cno_mark' lookup vowel_marks @cno_mark' lookup tone_t_asp2_t u16F91' lookup asp_tone_asp;
    sub u16F52' lookup asp_vowel_vowel @cno_mark' lookup tone_t_asp2_t u16F91' lookup asp_tone_asp;
    sub u16F53' lookup asp_vowel_vowel @cno_mark' lookup vowel_marks @cno_mark' lookup vowel_marks @cno_mark' lookup tone_t_asp3_t u16F91' lookup asp_tone_asp;
    sub u16F53' lookup asp_vowel_vowel @cno_mark' lookup vowel_marks @cno_mark' lookup tone_t_asp3_t u16F91' lookup asp_tone_asp;
    sub u16F53' lookup asp_vowel_vowel @cno_mark' lookup tone_t_asp3_t u16F91' lookup asp_tone_asp;
    # ASP if followed by a vowel is a mark
    sub @ASP' lookup asp_marks @cno_mark;
    sub u16F53' lookup asp_marks @cno_mark @cno_mark @cno_mark [u16F8F u16F90];
    sub u16F53' lookup asp_marks @cno_mark @cno_mark [u16F8F u16F90];
    sub u16F53' lookup asp_marks @cno_mark [u16F8F u16F90];
    # normal vowel mark replacement
    sub @cno_mark' lookup vowel_marks @cno_mark' lookup vowel_marks @cno_mark' lookup vowel_marks u16F91;
    sub @cno_mark' lookup vowel_marks @cno_mark' lookup vowel_marks u16F91;
    sub @cno_mark' lookup vowel_marks u16F91;
} choose_vowel_marks_sfm;

lookup choose_vowel_marks {
    # ASP is spacing for shoulder
    ignore sub @ASP' @cno_mark @cno_mark @cno_mark u16F90;
    ignore sub @ASP' @cno_mark @cno_mark u16F90;
    ignore sub @ASP' @cno_mark u16F90;
    ignore sub @ASP' @VOWEL_TALL @cno_mark @cno_mark u16F8F;
    ignore sub @ASP' @VOWEL_TALL @cno_mark u16F8F;
    ignore sub @ASP' @VOWEL_TALL u16F8F;
    # ASP is spacing and comes after mark vowels
    sub u16F51' lookup asp_vowel_vowel @cno_mark' lookup vowel_marks @cno_mark' lookup vowel_marks @cno_mark' lookup tone_t_asp1_t @MARKTONES' lookup asp_tone_asp;
    sub u16F51' lookup asp_vowel_vowel @cno_mark' lookup vowel_marks @cno_mark' lookup tone_t_asp1_t @MARKTONES' lookup asp_tone_asp;
    sub u16F51' lookup asp_vowel_vowel @cno_mark' lookup tone_t_asp1_t @MARKTONES' lookup asp_tone_asp;
    sub u16F52' lookup asp_vowel_vowel @cno_mark' lookup vowel_marks @cno_mark' lookup vowel_marks @cno_mark' lookup tone_t_asp2_t @MARKTONES' lookup asp_tone_asp;
    sub u16F52' lookup asp_vowel_vowel @cno_mark' lookup vowel_marks @cno_mark' lookup tone_t_asp2_t @MARKTONES' lookup asp_tone_asp;
    sub u16F52' lookup asp_vowel_vowel @cno_mark' lookup tone_t_asp2_t @MARKTONES' lookup asp_tone_asp;
    sub u16F53' lookup asp_vowel_vowel @cno_mark' lookup vowel_marks @cno_mark' lookup vowel_marks @cno_mark' lookup tone_t_asp3_t @MARKTONES' lookup asp_tone_asp;
    sub u16F53' lookup asp_vowel_vowel @cno_mark' lookup vowel_marks @cno_mark' lookup tone_t_asp3_t @MARKTONES' lookup asp_tone_asp;
    sub u16F53' lookup asp_vowel_vowel @cno_mark' lookup tone_t_asp3_t @MARKTONES' lookup asp_tone_asp;
    # ASP if followed by a vowel is a mark
    sub @ASP' lookup asp_marks @cno_mark;
    sub u16F53' lookup asp_marks @cno_mark @cno_mark @cno_mark [u16F8F u16F90];
    sub u16F53' lookup asp_marks @cno_mark @cno_mark [u16F8F u16F90];
    sub u16F53' lookup asp_marks @cno_mark [u16F8F u16F90];
    # normal vowel mark replacement
    sub @cno_mark' lookup vowel_marks @cno_mark' lookup vowel_marks @cno_mark' lookup vowel_marks @MARKTONES;
    sub @cno_mark' lookup vowel_marks @cno_mark' lookup vowel_marks @MARKTONES;
    sub @cno_mark' lookup vowel_marks @MARKTONES;
} choose_vowel_marks;

# While block_W_context stops most inadvertant attachments, we still need to handle
# where there is no tone mark. For this we could simply put a zwsp before every consonant
# But then we fall foul of the ligature problem and can't attach to the second in a
# one to many replacement.

@preCons = [@WB u16F51 u16F52];
lookup insert_zwsp {
    sub @preCons by @preCons ZWNBS;
} insert_zwsp;

lookup block_cursive {
    ignore sub ZWNBS @Cons;
    sub @preCons' lookup insert_zwsp @Cons;
} block_cursive;

do  for l = [ygp ywqa narrow hmdd flat point open lpo dot];
    let n = "@cno_" + l;
    let c = "@c_" + l;
    let l = "lig_" + l;
    {
lookup $l {
    sub $n by $c;
} $l;
    }


lookup left_asp_ma {
    lookupflag UseMarkFilteringSet @ASPALLMARKS;
    sub u16F04 u16F51 by u16F04_u16F51;
    sub u16F04 u16F51.mark by u16F04_u16F51;
} left_asp_ma;

lookup left_asp_na {
    lookupflag UseMarkFilteringSet @ASPALLMARKS;
    sub u16F10 u16F51 by u16F10_u16F51;
    sub u16F10 u16F51.mark by u16F10_u16F51;
} left_asp_na;

lookup left_asp_nga {
    lookupflag UseMarkFilteringSet @ASPALLMARKS;
    sub u16F23 u16F51 by u16F23_u16F51;
    sub u16F23 u16F51.mark by u16F23_u16F51;
} left_asp_nga;

languagesystem DFLT dflt;
languagesystem DFLT HMD;
languagesystem DFLT HMDD;
languagesystem DFLT HMZ;
languagesystem DFLT LPO;
languagesystem DFLT SFM;
languagesystem DFLT YGP;
languagesystem DFLT YWQA;
languagesystem DFLT YWQB;

feature rlig {
        lookup error_check;
        lookup hide_tones;
        lookup lig_4F;
        lookup choose_vowel_marks;
        lookup block_W_context;
        lookup block_cursive;
    language SFM exclude_dflt;
        lookup error_check;
        lookup hide_tones;
        lookup lig_4F;
        lookup choose_vowel_marks_sfm;
        lookup block_W_context;
        lookup block_cursive;
} rlig;

feature locl {
  script DFLT;
    language dflt;
    language YGP exclude_dflt;
        lookup lig_ygp;
        lookup lig_narrow;
    language SFM exclude_dflt;
        lookup lig_point;
        lookup left_asp_ma;
        lookup left_asp_na;
    language HMZ exclude_dflt;
        lookup lig_point;
        lookup left_asp_ma;
        lookup left_asp_na;
        lookup left_asp_nga;
        lookup lig_open;
    language YWQA exclude_dflt;
        lookup lig_narrow;
#        lookup lig_flat;
        lookup lig_ywqa;
    language HMD exclude_dflt;
        lookup lig_open;
        lookup lig_point;
        lookup left_asp_na;
    language LPO exclude_dflt;
        lookup lig_lpo;
        lookup lig_flat;
        lookup lig_open;
    language YWQB exclude_dflt;
        lookup lig_narrow;
        lookup lig_flat;
    language HMDD exclude_dflt;
        lookup lig_hmdd;
        lookup lig_dot;
        lookup lig_open;
        lookup lig_point;
} locl;

######################
# Attaching
######################

do  let w = " ".join(x for x in feaclass('WB') if x not in ('u16F51', 'u16F52'));
    { @pureWB = [$w]; }
do  let w = " ".join(x for x in feaclass('W') if x[4] not in ('5', '6', '7', '8'));
    { @pureW = [$w]; }

#############
# Simulate a spacing mark if we can
# Add space to the mark to increase to width of base + asp
# Split them into one lookup per base of interest.
# Much of the need for these functions is due to a bug in python 3 that list expressions
#   or lambdas can't reference imported locals, which is how the previously calculated
#   values are passed in. So we have to do all the work in a function call.

# Return whether this base has any marks that need protrude beyond the asp by
# greater than the width of the thinnest vowel if it weren't kerned back.
def needslookup(c, fn) {
    for m in feaclass(c):
        if fn(m) != 0:
            return True
    return False
} needslookup;

# Create all the positioning adjustment rules for a lookup
# And cache them so can map multiple bases to the same lookup
# Saves some 11 lookups out of 24 (for a potential 35 without caching)
def makerules(lname, c, fn, fmt, cname="base") {
    if not hasattr(makerules, 'cache'):
        makerules.cache = {}
        makerules.namemap = {}
    if cname not in makerules.cache:
        makerules.cache[cname] = {}
        makerules.namemap[cname] = {}
    res = []
    for m in feaclass(c):
        s = fn(m)
        if s != 0:
            res.append(fmt.format(g=m, s=s)+";")
    fres = (lf()+"        ").join(res)
    if fres not in makerules.cache[cname]:
        makerules.cache[cname][fres] = lname
    makerules.namemap[cname][lname] = makerules.cache[cname][fres]
    # already in the cache under another name
    if makerules.cache[cname][fres] != lname:
        return ""
    else:
        return fres
} makerules;

def getlname(lname, cname="base") {
    return makerules.namemap[cname].get(lname, lname)
} getlname;

# Create a contextual lookup that calls one lookup per base of interest
do  for w = @pureW;
    let o = ADVx(w) - APx(w, 'W') + ADVx('u16F51');
    let lname = "space_waist_" + w;
    let fn = lambda m: max(o - ADVx(m), 0);
    let e = makerules(lname, 'pureWB', fn, "pos {g} {s:d}");
    if needslookup('pureWB', fn) and e != "";
    {
        lookup $lname {
            $e;
        } $lname;
    }

# Create the lookups for all the bases of interest.
lookup space_waist_kern_W {
do  for w = @pureW;
    let o = ADVx(w) - APx(w, 'W') + ADVx('u16F51');
    let fn = lambda m: max(o - ADVx(m), 0);
    let lname = getlname("space_waist_" + w);
    if needslookup('pureWB', fn);
    {
        pos $w' @ASPALLMARKS' @WB' lookup $lname u16F8F;
    }
} space_waist_kern_W;

do  for a = [EE KK FF SS WW FR SR ST SRT];
    let n = "cursive_attach_" + (a if a[1] in "RT" else a[0]);
    let b = "@" + a[0] + "B" + a[1:] if a[1] in "RT" else "@" + a[0] + "B";
    let c = "@" + a if a[1] in "RT" else "@" + a[0];
    {
        lookup $n {
            lookupflag IgnoreMarks;
            pos cursive $b $c;
        } $n;
    }

lookup cursive_attach_WR {
    lookupflag IgnoreMarks;
    do  for b = @W;
        let exx = ADVx(b);
        let exy = APy(b, "W");
        {
            pos cursive $b <anchor NULL> <anchor $exx $exy>;
        }
    do  for b = @WB;
        let exx = APx(b, "W");
        let exy = APy(b, "W");
        let enx = APx(b, "WB");
        let eny = APy(b, "WB");
        {
            pos cursive $b <anchor $enx $eny> <anchor $exx $exy>;
        }
} cursive_attach_WR;

def cursive_rules(ap) {
    res = []
    for b in feaclass(ap):
#        if b == "u16F2E":
#            print("{}: {}+{} {}={} SR={}, u16F51 S={} SB={}".format(info("postscriptFontName"), b, ADVx(b), ap, APx(b, ap), APx(b, "SR"), APx("u16F51", "S"), APx("u16F51", "SB")))
        exitx = APx("u16F51", "S") - APx("u16F51", "SB") + APx(b, "SR", ADVx(b))
        exity = APy(b, ap)
        res.append("pos cursive {} <anchor NULL> <anchor {} {}>;".format(b, exitx, exity))
    for d in feaclass(ap+"B"):
        res.append("pos cursive {} <anchor {} {}> <anchor {} {}>;".format(d, APx(d, ap+"B"), APy(d, ap+"B"), APx(d, ap), APy(d, ap)))
    return "    " + "\n    ".join(res)
} cursive_rules;

do  for a = [K F W];
    let n = "asp_curs_"+a;
    let r = cursive_rules(a);
    {
        lookup $n {
            lookupflag IgnoreMarks;
            $r;
        } $n;
    }

#############
# 4 lookups to do spacing marks for spacing of head and foot vowel sequences
# Limit this to narrow bases
do  let h = " ".join(g for g in feaclass('H') if (ADVx(g) - APx(g, "H")) < ADVx('u16F64'));
    { @narrowHRight = [$h]; }
do  let h = " ".join(g for g in feaclass('H') if APx(g, "H") < ADVx('u16F64'));
    { @narrowHLeft = [$h]; }
do  let h = " ".join(g for g in feaclass('H') if (ADVx(g) - APx(g, "H")) < 0.5 * ADVx('u16F64'));
    { @vnarrowHRight = [$h]; }
do  let h = " ".join(g for g in feaclass('H') if APx(g, "H") < 0.5 * ADVx('u16F64'));
    { @vnarrowHLeft = [$h]; }
do  let h = " ".join(g for g in feaclass('H') if (ADVx(g) - APx(g, "H")) < 1.5 * ADVx('u16F64'));
    { @wnarrowHRight = [$h]; }
do  let h = " ".join(g for g in feaclass('H') if APx(g, "H") < 1.5 * ADVx('u16F64'));
    { @wnarrowHLeft = [$h]; }
do  let h = " ".join(g for g in feaclass('F') if (ADVx(g) - APx(g, "F")) < ADVx('u16F64'));
    { @narrowFRight = [$h]; }
do  let h = " ".join(g for g in feaclass('F') if APx(g, "F") < ADVx('u16F64'));
    { @narrowFLeft = [$h]; }
do  let h = " ".join(g for g in feaclass('F') if (ADVx(g) - APx(g, "F")) < 0.5 * ADVx('u16F64'));
    { @vnarrowFRight = [$h]; }
do  let h = " ".join(g for g in feaclass('F') if APx(g, "F") < 0.5 * ADVx('u16F64'));
    { @vnarrowFLeft = [$h]; }
do  let h = " ".join(g for g in feaclass('F') if (ADVx(g) - APx(g, "F")) < 1.5 * ADVx('u16F64'));
    { @wnarrowFRight = [$h]; }
do  let h = " ".join(g for g in feaclass('F') if APx(g, "F") < 1.5 * ADVx('u16F64'));
    { @wnarrowFLeft = [$h]; }

# Add space to previously inserted zwsp for width of first component
# and base for last component
lookup space_pairlefthead {
do  for h = @_H;
    let t = ADVx(h);
    {
        pos @wnarrowHLeft <$t 0 $t 0> $h 0;
    }
} space_pairlefthead;

lookup space_pairhalflefthead {
do  for h = @_H;
    let t = int(ADVx(h)/2);
    {
        pos @wnarrowHLeft <$t 0 $t 0> $h 0;
    }
} space_pairhalflefthead;

lookup space_pairrighthead {
do  for h = @_H;
    let t = ADVx(h);
    {
        pos @wnarrowHLeft $t $h 0;
    }
} space_pairrighthead;

lookup space_pairhalfrighthead {
do  for h = @_H;
    let t = int(ADVx(h)/2);
    {
        pos @wnarrowHLeft $t $h 0;
    }
} space_pairhalfrighthead;

lookup space_pairleftfoot {
do  for h = @_F;
    let t = ADVx(h);
    {
        pos @wnarrowFLeft <$t 0 $t 0> $h 0;
    }
} space_pairleftfoot;

lookup space_pairhalfleftfoot {
do  for h = @_F;
    let t = int(ADVx(h)/2);
    {
        pos @wnarrowFLeft <$t 0 $t 0> $h 0;
    }
} space_pairhalfleftfoot;

lookup space_pairrightfoot {
do  for h = @_F;
    let t = ADVx(h);
    {
        pos @wnarrowFLeft $t $h 0;
    }
} space_pairrightfoot;

lookup space_pairhalfrightfoot {
do  for h = @_F;
    let t = int(ADVx(h)/2);
    {
        pos @wnarrowFLeft $t $h 0;
    }
} space_pairhalfrightfoot;

lookup space_leftheadfoot {
    ignore pos @NMARKTONES @wnarrowHLeft';
    pos @vnarrowHLeft' lookup space_pairhalflefthead @_H' u16F91;
    pos @narrowHLeft' lookup space_pairlefthead @_H' @_H u16F91;
    pos @wnarrowHLeft' lookup space_pairlefthead @_H' @_H @_H u16F91;
    pos @vnarrowFLeft' lookup space_pairhalfleftfoot @_F' u16F92;
    pos @narrowFLeft' lookup space_pairleftfoot @_F' @_F u16F92;
    pos @wnarrowFLeft' lookup space_pairleftfoot @_F' @_F @_F u16F92;
} space_leftheadfoot;

lookup space_rightheadfoot {
    pos @vnarrowHRight' lookup space_pairhalfrighthead @_H' u16F91 ZWNBS @H @_H u16F91;
    pos @vnarrowHRight' lookup space_pairhalfrighthead @_H' u16F91 ZWNBS @H @_H @_H u16F91;
    pos @vnarrowHRight' lookup space_pairhalfrighthead @_H' u16F91 ZWNBS @H @_H @_H @_H u16F91;
    pos @vnarrowFRight' lookup space_pairhalfrightfoot @_F' u16F92 ZWNBS @F @_F u16F92;
    pos @vnarrowFRight' lookup space_pairhalfrightfoot @_F' u16F92 ZWNBS @F @_F @_F u16F92;
    pos @vnarrowFRight' lookup space_pairhalfrightfoot @_F' u16F92 ZWNBS @F @_F @_F @_F u16F92;
    ignore pos @vnarrowHRight' @_H u16F91 ZWNBS;
    ignore pos @vnarrowHRight' @_F u16F92 ZWNBS;
    pos @vnarrowHRight' lookup space_pairhalfrighthead @_H' u16F91;
    pos @vnarrowFRight' lookup space_pairhalfrightfoot @_F' u16F92;
} space_rightheadfoot;

# Add half the centre width to both sides
lookup adv_pairhalfrighthead {
do  for h = @_H;
    let t = int(ADVx(h) / 2);
    {
        pos @wnarrowHRight' $t @_H $h;
    }
} adv_pairhalfrighthead;

lookup adv_pairrighthead {
do  for h = @_H;
    let t = ADVx(h);
    {
        pos @wnarrowHRight' $t @_H $h;
    }
} adv_pairrighthead;

lookup adv_lefthead {
    ignore pos @NMARKTONES @narrowHLeft';
do  for h = @_H;
    let t = ADVx(h);
    let s = int(t/2);
    {
        pos @wnarrowHLeft' <$s 0 $s 0> @_H $h @_H @MARKTONES;
    }
} adv_lefthead;

lookup adv_pairhalfrightfoot {
do  for h = @_F;
    let t = int(ADVx(h) / 2);
    {
        pos @wnarrowFRight' $t @_F $h;
    }
} adv_pairhalfrightfoot;

lookup adv_pairrightfoot {
do  for h = @_F;
    let t = ADVx(h);
    {
        pos @wnarrowFRight' $t @_F $h;
    }
} adv_pairrightfoot;

lookup adv_leftfoot {
    ignore pos @NMARKTONES @narrowFLeft';
do  for h = @_F;
    let t = ADVx(h);
    let s = int(t/2);
    {
        pos @wnarrowFLeft' <$s 0 $s 0> @_F $h @_F @MARKTONES;
    }
} adv_leftfoot;

lookup adv_rightheadfoot {
    pos @narrowHRight' lookup adv_pairrighthead @_H' @_H' u16F91 ZWNBS @H @_H u16F91;
    pos @narrowHRight' lookup adv_pairrighthead @_H' @_H' u16F91 ZWNBS @H @_H @_H u16F91;
    pos @narrowHRight' lookup adv_pairrighthead @_H' @_H' u16F91 ZWNBS @H @_H @_H @_H u16F91;
    pos @narrowHRight' lookup adv_pairhalfrighthead @_H' @_H' @_H u16F91 ZWNBS @H @_H u16F91;
    pos @narrowHRight' lookup adv_pairhalfrighthead @_H' @_H' @_H u16F91 ZWNBS @H @_H @_H u16F91;
    pos @narrowHRight' lookup adv_pairhalfrighthead @_H' @_H' @_H u16F91 ZWNBS @H @_H @_H @_H u16F91;
    pos @narrowFRight' lookup adv_pairrightfoot @_F' @_F' u16F92 ZWNBS @F @_F u16F92;
    pos @narrowFRight' lookup adv_pairrightfoot @_F' @_F' u16F92 ZWNBS @F @_F @_F u16F92;
    pos @narrowFRight' lookup adv_pairrightfoot @_F' @_F' u16F92 ZWNBS @F @_F @_F @_F u16F92;
    pos @narrowFRight' lookup adv_pairhalfrightfoot @_F' @_F' @_F u16F92 ZWNBS @F @_F u16F92;
    pos @narrowFRight' lookup adv_pairhalfrightfoot @_F' @_F' @_F u16F92 ZWNBS @F @_F @_F u16F92;
    pos @narrowFRight' lookup adv_pairhalfrightfoot @_F' @_F' @_F u16F92 ZWNBS @F @_F @_F @_F u16F92;
    ignore pos @narrowHRight' @_H @_H u16F91 ZWNBS;
    ignore pos @narrowHRight' @_H @_H @_H u16F91 ZWNBS;
    ignore pos @narrowFRight' @_F @_F u16F92 ZWNBS;
    ignore pos @narrowFRight' @_F @_F @_F u16F92 ZWNBS;
    pos @narrowHRight' lookup adv_pairrighthead @_H' @_H' u16F91;
    pos @narrowHRight' lookup adv_pairhalfrighthead @_H' @_H' @_H u16F91;
    pos @narrowFRight' lookup adv_pairrightfoot @_F' @_F' u16F92;
    pos @narrowFRight' lookup adv_pairhalfrightfoot @_F' @_F' @_F u16F92;
} adv_rightheadfoot;

lookup adv_extrapairhead {
do  for h = @_H;
    let t = ADVx(h);
    {
        pos @wnarrowHRight' $t @_H @_H $h;
    }
} adv_extrapairhead;

lookup adv_extrapairfoot {
do  for h = @_F;
    let t = ADVx(h);
    {
        pos @wnarrowFRight' $t @_F @_F $h;
    }
} adv_extrapairfoot;

lookup adv_extra_headfoot {
    pos @wnarrowHRight' lookup adv_extrapairhead @_H' @_H' @_H' u16F91 ZWNBS @H @_H u16F91;
    pos @wnarrowHRight' lookup adv_extrapairhead @_H' @_H' @_H' u16F91 ZWNBS @H @_H @_H u16F91;
    pos @wnarrowHRight' lookup adv_extrapairhead @_H' @_H' @_H' u16F91 ZWNBS @H @_H @_H @_H u16F91;
    pos @wnarrowFRight' lookup adv_extrapairfoot @_F' @_F' @_F' u16F92 ZWNBS @F @_F u16F92;
    pos @wnarrowFRight' lookup adv_extrapairfoot @_F' @_F' @_F' u16F92 ZWNBS @F @_F @_F u16F92;
    pos @wnarrowFRight' lookup adv_extrapairfoot @_F' @_F' @_F' u16F92 ZWNBS @F @_F @_F @_F u16F92;
    ignore pos @wnarrowHRight' @_H @_H @_H u16F91 ZWNBS;
    ignore pos @wnarrowFRight' @_F @_F @_F u16F92 ZWNBS;
    pos @wnarrowHRight' lookup adv_extrapairhead @_H' @_H' @_H' u16F91;
    pos @wnarrowFRight' lookup adv_extrapairfoot @_F' @_F' @_F' u16F92;
} adv_extra_headfoot;

# Now take away half the width of the base from both
lookup base_headshift {
do  for b = @wnarrowHLeft;
    let s = -APx(b, "H");
    {
        pos $b' <$s 0 $s 0>;
    }
} base_headshift;

lookup base_headadv {
do  for b = @wnarrowHRight;
    let s = APx(b, "H") - ADVx(b);
    {
        pos $b' $s;
    }
} base_headadv;

lookup base_footshift {
do  for b = @wnarrowFLeft;
    let s = -APx(b, "F");
    {
        pos $b' <$s 0 $s 0>;
    }
} base_footshift;

lookup base_footadv {
do  for b = @wnarrowFRight;
    let s = APx(b, "F") - ADVx(b);
    {
        pos $b' $s;
    }
} base_footadv;

lookup base_leftheadfoot {
    ignore pos @NMARKTONES @wnarrowHLeft';
    pos @vnarrowHLeft' lookup base_headshift @_H u16F91;
    pos @narrowHLeft' lookup base_headshift @_H @_H u16F91;
    pos @wnarrowHLeft' lookup base_headshift @_H @_H @_H u16F91;
    pos @vnarrowFLeft' lookup base_footshift @_F u16F92;
    pos @narrowFLeft' lookup base_footshift @_F @_F u16F92;
    pos @wnarrowFLeft' lookup base_footshift @_F @_F @_F u16F92;
} base_leftheadfoot;

lookup base_rightheadfoot {
    pos @vnarrowHRight' lookup base_headadv @_H u16F91 ZWNBS @H @_H u16F91;
    pos @vnarrowHRight' lookup base_headadv @_H u16F91 ZWNBS @H @_H @_H u16F91;
    pos @vnarrowHRight' lookup base_headadv @_H u16F91 ZWNBS @H @_H @_H  @_H u16F91;
    pos @vnarrowHRight' lookup base_headadv @_H u16F92 ZWNBS @H @_H u16F92;
    pos @vnarrowHRight' lookup base_headadv @_H u16F92 ZWNBS @H @_H @_H u16F92;
    pos @vnarrowHRight' lookup base_headadv @_H u16F92 ZWNBS @H @_H @_H  @_H u16F92;
    pos @narrowHRight' lookup base_headadv @_H @_H u16F91 ZWNBS @H @_H u16F91;
    pos @narrowHRight' lookup base_headadv @_H @_H u16F91 ZWNBS @H @_H @_H u16F91;
    pos @narrowHRight' lookup base_headadv @_H @_H u16F91 ZWNBS @H @_H @_H  @_H u16F91;
    pos @narrowFRight' lookup base_footadv @_F @_F u16F92 ZWNBS @F @_F u16F92;
    pos @narrowFRight' lookup base_footadv @_F @_F u16F92 ZWNBS @F @_F @_F u16F92;
    pos @narrowFRight' lookup base_footadv @_F @_F u16F92 ZWNBS @F @_F @_F  @_F u16F92;
    pos @wnarrowFRight' lookup base_footadv @_F @_F @_F u16F91 ZWNBS @F @_F u16F91;
    pos @wnarrowFRight' lookup base_footadv @_F @_F @_F u16F91 ZWNBS @F @_F @_F u16F91;
    pos @wnarrowFRight' lookup base_footadv @_F @_F @_F u16F91 ZWNBS @F @_F @_F  @_F u16F91;
    pos @wnarrowFRight' lookup base_footadv @_F @_F @_F u16F92 ZWNBS @F @_F u16F92;
    pos @wnarrowFRight' lookup base_footadv @_F @_F @_F u16F92 ZWNBS @F @_F @_F u16F92;
    pos @wnarrowFRight' lookup base_footadv @_F @_F @_F u16F92 ZWNBS @F @_F @_F  @_F u16F92;
    ignore pos @vnarrowHRight' @_H u16F91 ZWNBS;
    ignore pos @narrowHRight' @_H @_H u16F91 ZWNBS;
    ignore pos @wnarrowHRight' @_H @_H @_H u16F91 ZWNBS;
    ignore pos @vnarrowHRight' @_H u16F92 ZWNBS;
    ignore pos @narrowHRight' @_H @_H u16F92 ZWNBS;
    ignore pos @wnarrowHRight' @_H @_H @_H u16F92 ZWNBS;
    pos @vnarrowHRight' lookup base_headadv @_H u16F91;
    pos @narrowHRight' lookup base_headadv @_H @_H u16F91;
    pos @wnarrowHRight' lookup base_headadv @_H @_H @_H u16F91;
    pos @vnarrowFRight' lookup base_footadv @_F u16F92;
    pos @narrowFRight' lookup base_footadv @_F @_F u16F92;
    pos @wnarrowFRight' lookup base_footadv @_F @_F @_F u16F92;
} base_rightheadfoot;

lookup spacekern_headfoot {
    ignore pos @NMARKTONES @wnarrowHLeft';
    pos u16F28' lookup space_leftheadfoot lookup space_rightheadfoot lookup base_leftheadfoot lookup base_rightheadfoot [@_H @_F]' @MARKTONES;
    pos u16F29' lookup space_leftheadfoot lookup space_rightheadfoot lookup base_leftheadfoot lookup base_rightheadfoot @GHHAVOWELS' @MARKTONES;
    pos @UANCONS' lookup space_leftheadfoot lookup space_rightheadfoot lookup base_leftheadfoot lookup base_rightheadfoot [u16F6C u16F6D]' @MARKTONES;
    pos [@wnarrowHLeft @wnarrowFLeft]' lookup space_leftheadfoot lookup space_rightheadfoot lookup adv_rightheadfoot lookup base_leftheadfoot lookup base_rightheadfoot [@_H @_F]' [@_H @_F]' @MARKTONES;
    pos [@wnarrowHLeft @wnarrowFLeft]' lookup space_leftheadfoot lookup space_rightheadfoot lookup adv_rightheadfoot lookup adv_extra_headfoot lookup base_leftheadfoot lookup base_rightheadfoot [@_H @_F]' [@_H @_F]' [@_H @_F]' @MARKTONES;
} spacekern_headfoot;

#############

#############

lookup asp_attach {
    pos base @S mark @_SB;
} asp_attach;

lookup asp_attach_r {
    pos base @SR mark @_SB;
} asp_attach_r;

lookup attach_F {
    pos base @F mark @_F;
} attach_F;

lookup attach_head {
    pos base @H mark @_H;
} attach_head;

lookup attach_head_D {
    pos base @HD mark @_HD;
} attach_head_D;

lookup attach_head_L {
    pos base @H mark @_HR;
} attach_head_L;

lookup attach_vowel_HR {
    pos mark @_HL mark @_HR;
} attach_vowel_HR;  

lookup attach_vowel_HL {
    pos mark @_HR mark @_HL;
} attach_vowel_HL;

lookup attach_foot {
    pos base @L mark @_L;
} attach_foot;

lookup attach_foot_L {
    pos base @L mark @_LR;
} attach_foot_L;

lookup attach_vowel_LL {
    pos mark @_LR mark @_LL;
} attach_vowel_LL;

# left shift vowels by fixed average width
# not per vowel since we want the left side of vowel
# sequence to be the same. Also all known 3 vowel sequences
# start with this character.
do  let a = -int(ADVx("u16F61") / 2);
    {
        lookup left_shift_vowel {
            pos @_H <$a 0 0 0>;
        } left_shift_vowel;
    }

#############
# remember cursive attachment must work both forwards and backwards
# lookups for basic vowel attachment, specifically W, H, L & F
lookup vowel_attach_basic {
    # Used by: dflt, ywqa, lpo.
    # No asp, tuck. With asp vowel(s) left to asp left.
    pos @W' @ASP' lookup cursive_attach_W @VOWEL_TALL' lookup cursive_attach_W @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' @ASP' lookup cursive_attach_W @VOWEL_TALL' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' @ASP' lookup cursive_attach_W @VOWEL_TALL' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @pureWB' lookup cursive_attach_W @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @pureWB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @pureWB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_WR @ASPALLMARKS' @WB' lookup cursive_attach_WR @WB' lookup cursive_attach_WR @WB' lookup cursive_attach_WR u16F8F;
    pos @W' lookup cursive_attach_WR @ASPALLMARKS' @WB' lookup cursive_attach_WR @WB' lookup cursive_attach_WR u16F8F;
    pos @W' lookup cursive_attach_WR @ASPALLMARKS' @WB' lookup cursive_attach_WR u16F8F;
    pos @H @_H' lookup attach_head_L @_H @_H u16F91;
    pos @H @_H' lookup attach_head_L @_H' lookup attach_vowel_HL u16F91;
    pos @H @_H' lookup attach_head_L @_H' lookup attach_vowel_HL u16F91;
    pos @H @VOWEL_DESC' lookup attach_head_D u16F91;
    pos @H @_H' lookup attach_head u16F91;
    pos @L @_L' lookup attach_foot_L @_L @_L u16F92;
    pos @L @_L' lookup attach_foot_L @_L' lookup attach_vowel_LL u16F92;
    pos @L @_L' lookup attach_foot u16F92;
    pos @S' lookup cursive_attach_S @ASP' lookup cursive_attach_S;
    pos @F' lookup cursive_attach_FR @ASPALLMARKS' @FB' lookup cursive_attach_FR @FB' lookup cursive_attach_FR @FB' lookup cursive_attach_FR;
    pos @F' lookup cursive_attach_FR @ASPALLMARKS' @FB' lookup cursive_attach_FR @FB' lookup cursive_attach_FR;
    pos @F' lookup cursive_attach_FR @ASPALLMARKS' @FB' lookup cursive_attach_FR;
    pos @F' @ASPALLMARKS' lookup asp_attach;
    pos @F' lookup cursive_attach_F @FB' lookup cursive_attach_F @FB' lookup cursive_attach_F @FB' lookup cursive_attach_F;
    pos @F' lookup cursive_attach_F @FB' lookup cursive_attach_F @FB' lookup cursive_attach_F;
    pos @F' lookup cursive_attach_F @FB' lookup cursive_attach_F;
    pos @SB @ASPMARKS' lookup asp_attach;
    pos @F u16F53.mark' lookup attach_F;
} vowel_attach_basic;

lookup vowel_attach_hmz {
    # no asp: tuck. F attach vowel(s) left to asp left. W tuck vowel(s)
    pos @W' @ASP' lookup cursive_attach_W @VOWEL_TALL' lookup cursive_attach_W @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' @ASP' lookup cursive_attach_W @VOWEL_TALL' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' @ASP' lookup cursive_attach_W @VOWEL_TALL' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @pureWB' lookup cursive_attach_W @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @pureWB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @pureWB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @ASPALLMARKS' @WB' lookup cursive_attach_W @WB' lookup cursive_attach_WR @WB' lookup cursive_attach_WR u16F8F;
    pos @W' lookup cursive_attach_W @ASPALLMARKS' @WB' lookup cursive_attach_W @WB' lookup cursive_attach_WR u16F8F;
    pos @W' lookup cursive_attach_W @ASPALLMARKS' @WB' lookup cursive_attach_W u16F8F;
    pos @H @_H' lookup attach_head_L @_H @_H u16F91;
    pos @H @_H' lookup attach_head_L @_H' lookup attach_vowel_HL u16F91;
    pos @H @_H' lookup attach_head_L @_H' lookup attach_vowel_HL u16F91;
    pos @H @VOWEL_DESC' lookup attach_head_D u16F91;
    pos @H @_H' lookup attach_head u16F91;
    pos @L @_L' lookup attach_foot_L @_L @_L u16F92;
    pos @L @_L' lookup attach_foot_L @_L' lookup attach_vowel_LL u16F92;
    pos @L @_L' lookup attach_foot u16F92;
    pos @S' lookup cursive_attach_S @ASP' lookup cursive_attach_S;
    pos @F' lookup cursive_attach_FR @ASPALLMARKS' @FB' lookup cursive_attach_FR @FB' lookup cursive_attach_F @FB' lookup cursive_attach_F;
    pos @F' lookup cursive_attach_FR @ASPALLMARKS' @FB' lookup cursive_attach_FR @FB' lookup cursive_attach_F;
    pos @F' lookup cursive_attach_FR @ASPALLMARKS' @FB' lookup cursive_attach_FR;
    pos @F' lookup asp_attach @ASPALLMARKS' lookup asp_attach;
    pos @F' lookup cursive_attach_F @FB' lookup cursive_attach_F @FB' lookup cursive_attach_F @FB' lookup cursive_attach_F;
    pos @F' lookup cursive_attach_F @FB' lookup cursive_attach_F @FB' lookup cursive_attach_F;
    pos @F' lookup cursive_attach_F @FB' lookup cursive_attach_F;
    pos @SB @ASPMARKS' lookup asp_attach;
    pos @F u16F53.mark' lookup attach_F;
} vowel_attach_hmz;

# Attach F to FR, i.e. push right
lookup vowel_attach_hmdd {
    # No asp: tuck. With asp attach vowel(s) left to asp left.
    pos @W' @ASP' lookup cursive_attach_WR @VOWEL_TALL' lookup cursive_attach_WR @WB' lookup cursive_attach_WR @WB' lookup cursive_attach_WR u16F8F;
    pos @W' @ASP' lookup cursive_attach_WR @VOWEL_TALL' lookup cursive_attach_WR @WB' lookup cursive_attach_WR u16F8F;
    pos @W' @ASP' lookup cursive_attach_WR @VOWEL_TALL' lookup cursive_attach_WR u16F8F;
    pos @W' lookup cursive_attach_WR @pureWB' lookup cursive_attach_WR @WB' lookup cursive_attach_WR @WB' lookup cursive_attach_WR u16F8F;
    pos @W' lookup cursive_attach_WR @pureWB' lookup cursive_attach_WR @WB' lookup cursive_attach_WR u16F8F;
    pos @W' lookup cursive_attach_WR @pureWB' lookup cursive_attach_WR u16F8F;
    pos @W' lookup cursive_attach_WR @ASPALLMARKS' @WB' lookup cursive_attach_WR @WB' lookup cursive_attach_WR @WB' lookup cursive_attach_WR u16F8F;
    pos @W' lookup cursive_attach_WR @ASPALLMARKS' @WB' lookup cursive_attach_WR @WB' lookup cursive_attach_WR u16F8F;
    pos @W' lookup cursive_attach_WR @ASPALLMARKS' @WB' lookup cursive_attach_WR u16F8F;
    pos @H @_H' lookup attach_head_L @_H @_H u16F91;
    pos @H @_H' lookup attach_head_L @_H' lookup attach_vowel_HL u16F91;
    pos @H @_H' lookup attach_head_L @_H' lookup attach_vowel_HL u16F91;
    pos @H @VOWEL_DESC' lookup attach_head_D u16F91;
    pos @H @_H' lookup attach_head u16F91;
    pos @L @_L' lookup attach_foot_L @_L @_L u16F92;
    pos @L @_L' lookup attach_foot_L @_L' lookup attach_vowel_LL u16F92;
    pos @L @_L' lookup attach_foot u16F92;
    pos @S' lookup cursive_attach_SR @ASP' lookup cursive_attach_SR;
    pos @FR' lookup cursive_attach_FR @ASPALLMARKS' @FBR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR;
    pos @FR' lookup cursive_attach_FR @ASPALLMARKS' @FBR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR;
    pos @FR' lookup cursive_attach_FR @ASPALLMARKS' @FBR' lookup cursive_attach_FR;
    pos @FR' @ASPALLMARKS' lookup asp_attach_r;
    pos @FR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR;
    pos @FR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR;
    pos @FR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR;
    pos @SB @ASPMARKS' lookup asp_attach_r;
    pos @FR u16F53.mark' lookup attach_F;
} vowel_attach_hmdd;

lookup vowel_attach_yna {
    # No asp: tuck. With asp, attach single vowel right to asp right. Asp with multiples vowels: tuck
    pos @W' @ASP' lookup cursive_attach_W @VOWEL_TALL' lookup cursive_attach_W @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' @ASP' lookup cursive_attach_W @VOWEL_TALL' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' @ASP' lookup cursive_attach_WR @VOWEL_TALL' lookup cursive_attach_WR u16F8F;
    pos @W' lookup cursive_attach_W @pureWB' lookup cursive_attach_W @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @pureWB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @pureWB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @ASPALLMARKS' @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @ASPALLMARKS' @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_WR @ASPALLMARKS' @WB' lookup cursive_attach_WR u16F8F;
    pos @H @_H' lookup attach_head_L @_H @_H u16F91;
    pos @H @_H' lookup attach_head_L @_H' lookup attach_vowel_HL u16F91;
    pos @H @_H' lookup attach_head_L @_H' lookup attach_vowel_HL u16F91;
    pos @H @VOWEL_DESC' lookup attach_head_D u16F91;
    pos @H @_H' lookup attach_head u16F91;
    pos @L @_L' lookup attach_foot_L @_L @_L u16F92;
    pos @L @_L' lookup attach_foot_L @_L' lookup attach_vowel_LL u16F92;
    pos @L @_L' lookup attach_foot u16F92;
    pos @S' lookup cursive_attach_SR @ASP' lookup cursive_attach_SR;
    pos @FR' lookup cursive_attach_F @ASPALLMARKS' @FBR' lookup cursive_attach_F @FBR' lookup cursive_attach_F @FBR' lookup cursive_attach_F;
    pos @FR' lookup cursive_attach_F @ASPALLMARKS' @FBR' lookup cursive_attach_F @FBR' lookup cursive_attach_F;
    pos @FR' lookup cursive_attach_FR @ASPALLMARKS' @FBR' lookup cursive_attach_FR;
    pos @FR' @ASPALLMARKS' lookup asp_attach_r;
    pos @FR' lookup cursive_attach_F @FBR' lookup cursive_attach_F @FBR' lookup cursive_attach_F @FBR' lookup cursive_attach_F;
    pos @FR' lookup cursive_attach_F @FBR' lookup cursive_attach_F @FBR' lookup cursive_attach_F;
    pos @FR' lookup cursive_attach_F @FBR' lookup cursive_attach_F;
    pos @SB @ASPMARKS' lookup asp_attach_r;
    pos @FR u16F53.mark' lookup attach_F;
} vowel_attach_yna;

# Use E & K instead of W & L
lookup vowel_attach_sfm {
    # No asp: no tuck, align with rhs. Asp attach left of vowel(s) to right of asp.
    pos @E' @ASP' lookup cursive_attach_E @WB' lookup cursive_attach_E @WB' lookup cursive_attach_E @WB' lookup cursive_attach_E u16F8F;
    pos @E' @ASP' lookup cursive_attach_E @WB' lookup cursive_attach_E @WB' lookup cursive_attach_E u16F8F;
    pos @E' @ASP' lookup cursive_attach_E @WB' lookup cursive_attach_E u16F8F;
    pos @E' lookup cursive_attach_E @WB' lookup cursive_attach_E @WB' lookup cursive_attach_E @WB' lookup cursive_attach_E u16F8F;
    pos @E' lookup cursive_attach_E @WB' lookup cursive_attach_E @WB' lookup cursive_attach_E u16F8F;
    pos @E' lookup cursive_attach_E @WB' lookup cursive_attach_E u16F8F;
    pos @K' lookup cursive_attach_K @WB' lookup cursive_attach_K @WB' lookup cursive_attach_K @WB' lookup cursive_attach_K u16F92;
    pos @K' lookup cursive_attach_K @WB' lookup cursive_attach_K @WB' lookup cursive_attach_K u16F92;
    pos @K' lookup cursive_attach_K @WB' lookup cursive_attach_K u16F92;
    pos @K' lookup asp_curs_K @ASPALLMARKS' @WB' lookup asp_curs_K @WB' lookup cursive_attach_K @WB' lookup cursive_attach_K u16F92;
    pos @K' lookup asp_curs_K @ASPALLMARKS' @WB' lookup asp_curs_K @WB' lookup cursive_attach_K u16F92;
    pos @K' lookup asp_curs_K @ASPALLMARKS' @WB' lookup asp_curs_K u16F92;
    pos @H @_H' lookup attach_head_L @_H @_H u16F91;
    pos @H @_H' lookup attach_head_L @_H' lookup attach_vowel_HL u16F91;
    pos @H @_H' lookup attach_head_L @_H' lookup attach_vowel_HL u16F91;
    pos @H @VOWEL_DESC' lookup attach_head_D u16F91;
    pos @H @_H' lookup attach_head u16F91;
    pos @S' lookup cursive_attach_SR @ASP' lookup cursive_attach_SR;
    pos @FR' lookup asp_curs_F @ASPALLMARKS' @FBR' lookup asp_curs_F @FBR' lookup cursive_attach_F @FBR' lookup cursive_attach_F;
    pos @FR' lookup asp_curs_F @ASPALLMARKS' @FBR' lookup asp_curs_F @FBR' lookup cursive_attach_F;
    pos @FR' lookup asp_curs_F @ASPALLMARKS' @FBR' lookup asp_curs_F;
    pos @FR' @ASPALLMARKS' lookup asp_attach_r;
    pos @FR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR @FBR' lookup cursive_attach_F @FBR' lookup cursive_attach_F;
    pos @FR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR @FBR' lookup cursive_attach_F;
    pos @FR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR;
    pos @SB @ASPMARKS' lookup asp_attach_r;
    pos @FR u16F53.mark' lookup attach_F;
} vowel_attach_sfm;

lookup vowel_attach_ygp {
    # No asp: no tuck, attach right hand of consonant. With asp attach left of vowel(s) to right of asp.
    pos @W' @ASP' lookup cursive_attach_WR @VOWEL_TALL' lookup cursive_attach_WR @WB' lookup cursive_attach_WR @WB' lookup cursive_attach_WR u16F8F;
    pos @W' @ASP' lookup cursive_attach_WR @VOWEL_TALL' lookup cursive_attach_WR @WB' lookup cursive_attach_WR u16F8F;
    pos @W' @ASP' lookup cursive_attach_WR @VOWEL_TALL' lookup cursive_attach_WR u16F8F;
    pos @W' lookup cursive_attach_WR @pureWB' lookup cursive_attach_WR @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_WR @pureWB' lookup cursive_attach_WR @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_WR @pureWB' lookup cursive_attach_WR u16F8F;
    pos @W' lookup cursive_attach_W @ASPALLMARKS' @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @ASPALLMARKS' @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup asp_curs_W @ASPALLMARKS' @WB' lookup asp_curs_W u16F8F;
    pos @H @_H' lookup attach_head_L @_H @_H u16F91;
    pos @H @_H' lookup attach_head_L @_H' lookup attach_vowel_HL u16F91;
    pos @H @_H' lookup attach_head_L @_H' lookup attach_vowel_HL u16F91;
    pos @H @VOWEL_DESC' lookup attach_head_D u16F91;
    pos @H @_H' lookup attach_head u16F91;
    pos @L @_L' lookup attach_foot_L @_L @_L u16F92;
    pos @L @_L' lookup attach_foot_L @_L' lookup attach_vowel_LL u16F92;
    pos @L @_L' lookup attach_foot u16F92;
    pos @S' lookup cursive_attach_SR @ASP' lookup cursive_attach_SR;
    pos @FR' lookup asp_curs_F @ASPALLMARKS' @FBR' lookup asp_curs_F @FBR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR;
    pos @FR' lookup asp_curs_F @ASPALLMARKS' @FBR' lookup asp_curs_F @FBR' lookup cursive_attach_F;
    pos @FR' lookup asp_curs_F @ASPALLMARKS' @FBR' lookup asp_curs_F;
    pos @FR' @ASPALLMARKS' lookup asp_attach_r;
    pos @FR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR @FBR' lookup cursive_attach_F @FBR' lookup cursive_attach_F;
    pos @FR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR @FBR' lookup cursive_attach_F;
    pos @FR' lookup cursive_attach_FR @FBR' lookup cursive_attach_FR;
    pos @SB @ASPMARKS' lookup asp_attach_r;
    pos @FR u16F53.mark' lookup attach_F;
} vowel_attach_ygp;

lookup vowel_attach_hmd {
    # No asp: tuck. With asp align right of F vowel to right of asp. All else tuck
    pos @W' @ASP' lookup cursive_attach_W @VOWEL_TALL' lookup cursive_attach_W @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' @ASP' lookup cursive_attach_W @VOWEL_TALL' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' @ASP' lookup cursive_attach_W @VOWEL_TALL' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @pureWB' lookup cursive_attach_W @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @pureWB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @pureWB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @ASPALLMARKS' @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @ASPALLMARKS' @WB' lookup cursive_attach_W @WB' lookup cursive_attach_W u16F8F;
    pos @W' lookup cursive_attach_W @ASPALLMARKS' @WB' lookup cursive_attach_W u16F8F;
    pos @H @_H' lookup attach_head_L @_H @_H u16F91;
    pos @H @_H' lookup attach_head_L @_H' lookup attach_vowel_HL u16F91;
    pos @H @_H' lookup attach_head_L @_H' lookup attach_vowel_HL u16F91;
    pos @H @VOWEL_DESC' lookup attach_head_D u16F91;
    pos @H @_H' lookup attach_head u16F91;
    pos @L @_L' lookup attach_foot_L @_L @_L u16F92;
    pos @L @_L' lookup attach_foot_L @_L' lookup attach_vowel_LL u16F92;
    pos @L @_L' lookup attach_foot u16F92;
    pos @S' lookup cursive_attach_S @ASP' lookup cursive_attach_S;
    pos @FR' lookup cursive_attach_F @ASPALLMARKS' @FBR' lookup cursive_attach_F @FBR' lookup cursive_attach_F @FBR' lookup cursive_attach_F;
    pos @FR' lookup cursive_attach_F @ASPALLMARKS' @FBR' lookup cursive_attach_F @FBR' lookup cursive_attach_F;
    pos @FR' lookup cursive_attach_FR @ASPALLMARKS' @FBR' lookup cursive_attach_FR;
    pos @FR' @ASPALLMARKS' lookup asp_attach;
    pos @FR' lookup cursive_attach_F @FBR' lookup cursive_attach_F @FBR' lookup cursive_attach_F @FBR' lookup cursive_attach_F;
    pos @FR' lookup cursive_attach_F @FBR' lookup cursive_attach_F @FBR' lookup cursive_attach_F;
    pos @FR' lookup cursive_attach_F @FBR' lookup cursive_attach_F;
    pos @SB @ASPMARKS' lookup asp_attach;
    pos @FR u16F53.mark' lookup attach_F;
} vowel_attach_hmd;

#############

#############
# Different types of S attachment lookups for different languages
lookup vowel_attach_normal {
    # asp + 3 vowels.
    pos @S' lookup cursive_attach_S @SB' lookup cursive_attach_S @SB' lookup cursive_attach_S @SB' lookup cursive_attach_S @SB' lookup cursive_attach_S u16F90;
    pos @S' lookup cursive_attach_S @SB' lookup cursive_attach_S @SB' lookup cursive_attach_S @SB' lookup cursive_attach_S u16F90;
    pos @S' lookup cursive_attach_S @SB' lookup cursive_attach_S @SB' lookup cursive_attach_S u16F90;
    pos @S' lookup cursive_attach_S @SB' lookup cursive_attach_S u16F90;
    pos @S' lookup cursive_attach_S u16F53.mark' @SB' lookup cursive_attach_S @SB' lookup cursive_attach_S @SB' lookup cursive_attach_S u16F90;
    pos @S' lookup cursive_attach_S u16F53.mark' @SB' lookup cursive_attach_S @SB' lookup cursive_attach_S u16F90;
    pos @S' lookup cursive_attach_S u16F53.mark' @SB' lookup cursive_attach_S u16F90;
} vowel_attach_normal;

lookup vowel_attach_right {
    # asp + 3 vowels.
    pos @SR' lookup cursive_attach_SR @SBR' lookup cursive_attach_SR @SBR' lookup cursive_attach_SR @SBR' lookup cursive_attach_SR @SBR' lookup cursive_attach_SR u16F90;
    pos @SR' lookup cursive_attach_SR @SBR' lookup cursive_attach_SR @SBR' lookup cursive_attach_SR @SBR' lookup cursive_attach_SR u16F90;
    pos @SR' lookup cursive_attach_SR @SBR' lookup cursive_attach_SR @SBR' lookup cursive_attach_SR u16F90;
    pos @SR' lookup cursive_attach_SR @SBR' lookup cursive_attach_SR u16F90;
    pos @SR' lookup cursive_attach_SR u16F53.mark' @SBR' lookup cursive_attach_SR @SBR' lookup cursive_attach_SR @SBR' lookup cursive_attach_SR u16F90;
    pos @SR' lookup cursive_attach_SR u16F53.mark' @SBR' lookup cursive_attach_SR @SBR' lookup cursive_attach_SR u16F90;
    pos @SR' lookup cursive_attach_SR u16F53.mark' @SBR' lookup cursive_attach_SR u16F90;
} vowel_attach_right;

lookup vowel_attach_top {
    # asp + 3 vowels.
    pos @ST' lookup cursive_attach_ST @SBT' lookup cursive_attach_ST @SBT' lookup cursive_attach_ST @SBT' lookup cursive_attach_ST @SBT' lookup cursive_attach_ST u16F90;
    pos @ST' lookup cursive_attach_ST @SBT' lookup cursive_attach_ST @SBT' lookup cursive_attach_ST @SBT' lookup cursive_attach_ST u16F90;
    pos @ST' lookup cursive_attach_ST @SBT' lookup cursive_attach_ST @SBT' lookup cursive_attach_ST u16F90;
    pos @ST' lookup cursive_attach_ST @SBT' lookup cursive_attach_ST u16F90;
    pos @ST' lookup cursive_attach_ST u16F53.mark' @SBT' lookup cursive_attach_ST @SBT' lookup cursive_attach_ST @SBT' lookup cursive_attach_ST u16F90;
    pos @ST' lookup cursive_attach_ST u16F53.mark' @SBT' lookup cursive_attach_ST @SBT' lookup cursive_attach_ST u16F90;
    pos @ST' lookup cursive_attach_ST u16F53.mark' @SBT' lookup cursive_attach_ST u16F90;
} vowel_attach_top;

lookup vowel_attach_topright {
    # asp + 3 vowels.
    pos @SRT' lookup cursive_attach_SRT @SBRT' lookup cursive_attach_SRT @SBRT' lookup cursive_attach_SRT @SBRT' lookup cursive_attach_SRT @SBRT' lookup cursive_attach_SRT u16F90;
    pos @SRT' lookup cursive_attach_SRT @SBRT' lookup cursive_attach_SRT @SBRT' lookup cursive_attach_SRT @SBRT' lookup cursive_attach_SRT u16F90;
    pos @SRT' lookup cursive_attach_SRT @SBRT' lookup cursive_attach_SRT @SBRT' lookup cursive_attach_SRT u16F90;
    pos @SRT' lookup cursive_attach_SRT @SBRT' lookup cursive_attach_SRT u16F90;
    pos @SRT' lookup cursive_attach_SRT u16F53.mark' @SBRT' lookup cursive_attach_SRT @SBRT' lookup cursive_attach_SRT @SBRT' lookup cursive_attach_SRT u16F90;
    pos @SRT' lookup cursive_attach_SRT u16F53.mark' @SBRT' lookup cursive_attach_SRT @SBRT' lookup cursive_attach_SRT u16F90;
    pos @SRT' lookup cursive_attach_SRT u16F53.mark' @SBRT' lookup cursive_attach_SRT u16F90;
} vowel_attach_topright;
#############

# Sequences of 3 H & L vowels
lookup headfoot_vowels {
    pos @H' @_H' lookup left_shift_vowel @_H' lookup attach_vowel_HL @_H' lookup attach_vowel_HL u16F91;
    pos @L' @_L' lookup left_shift_vowel @_L' lookup attach_vowel_LL @_H' lookup attach_vowel_LL u16F92;
} headfoot_vowels;

# This lookup is for legacy cursive attachment
lookup asp_hf_attach_forward {
    lookupflag UseMarkFilteringSet @MARKTONES;

    pos @S' lookup cursive_attach_S @MARKTONES @ASP;
    pos @F' lookup cursive_attach_F @MARKTONES u16F53;
} asp_hf_attach_forward;

# cursively attach asp to base
lookup asp_hf_attach_left {
    lookupflag UseMarkFilteringSet @MARKTONES;

    pos @S @MARKTONES @ASP' lookup cursive_attach_S;
    pos @F @MARKTONES u16F53' lookup cursive_attach_F;
} asp_hf_attach_left;

lookup asp_hf_attach_right {
    lookupflag UseMarkFilteringSet @MARKTONES;

    pos @S @MARKTONES @ASP' lookup cursive_attach_SR;
    pos @F @MARKTONES u16F53' lookup cursive_attach_FR;
} asp_hf_attach_right;

# Give extra space to base if asp attached completely inside it
lookup asp_fix_attach {
    lookupflag UseMarkFilteringSet @MARKTONES;

do  for b = @S;
    let s = ADVx(b) - APx(b, "S") - ADVx("u16F51");
    if s > 0;
    {
        pos $b @MARKTONES @ASP' $s;
    }
} asp_fix_attach;

# attach ASP marks to base
lookup aspirations {
    pos @S @ASPALLMARKS' lookup asp_attach;
    pos @S u16F53.mark' lookup attach_F;
} aspirations;

lookup aspirations_r {
    pos @S @ASPALLMARKS' lookup asp_attach_r;
    pos @S u16F53.mark' lookup attach_F;
} aspirations_r;

#############
# 4 lookups to do spacing marks for spacing of head and foot vowel sequences
# Limit this to narrow bases
do  let h = " ".join(g for g in feaclass('H') if ADVx(g) < 2 * ADVx('u16F7B'));
    { @narrowH = [$h]; }

# Add space to previously inserted zwsp for width of first component
# and base for last component
lookup space_headfoot {
do  for h = @_H;
    let s = ADVx(h);
    {
        pos ZWNBS' $s @narrowH $h @_H @MARKTONES;
        pos ZWNBS' $s @narrowH $h @_H @_H @MARKTONES;
        pos ZWNBS @narrowH' $s @_H $h @MARKTONES;
        pos ZWNBS @narrowH' $s @_H @_H $h @MARKTONES;
    }
} space_headfoot;

# Add half the centre width to both sides
lookup adv_headfoot {
do  for h = @_H;
    let s = int(ADVx(h) / 2);
    {
        pos ZWNBS' $s @narrowH' $s @_H $h @_H @MARKTONES;
    }
} adv_headfoot;

# Now take away half the width of the base from both
lookup base_headfoot {
do  for b = @narrowH;
    let s = -int(ADVx(b) / 2);
    {
        pos ZWNBS' $s $b' $s @_H @_H @MARKTONES;
        pos ZWNBS' $s $b' $s @_H @_H @_H @MARKTONES;
    }
} base_headfoot;

lookup narr_headfoot {
    ignore pos ZWNBS' @narrowH' @VOWEL_DESC' u16F91';
do  for b = @narrowH;
    for m = @_H;
    let d = int((ADVx(m) - ADVx(b))/2);
    if d > 25;
    {
        pos ZWNBS' $d $b' $d $m @MARKTONES;
    }
} narr_headfoot;
#############

# Shift hanging vowels right for ASP
# Already attach to HD on base
@LOW_VOWEL_WASP = [@VOWEL_DESC u16F91];
lookup low_vowel_wasp {
    lookupflag UseMarkFilteringSet @LOW_VOWEL_WASP;
do  for h = @H;
    for v = @VOWEL_DESC;
    let s = APx(h, "S") - APx("u16F51", "SB") + APx("u16F51", "HD") - APx(h, "HD");
    let r = min(APx(h, "S") - APx("u16F51", "SB") + ADVx("u16F51") - ADVx(h), 0);
    let d = max(s + ADVx(v) - APx(v, "_HD") - ADVx("u16F51") + r, 0);
    if s > 0;
    {
        pos $h $v' <$s 0 0 0> u16F91' @ASP' $d;
    }
} low_vowel_wasp;

lookup low_vowel_rasp {
    lookupflag UseMarkFilteringSet @LOW_VOWEL_WASP;
do  for h = @H;
    for v = @VOWEL_DESC;
    let s = APx(h, "SR") + APx("u16F51", "HD") - APx(h, "HD");
    let d = APx("u16F51", "HD") - ADVx("u16F51") + APx(v, "_HR") - APx(v, "_HD");
    if APx(h, "HD") - APx(v, "_HD") + APx(v, "_HR") > APx(h, "SR");
    {
        pos $h $v' <$s 0 0 0> u16F91' @ASP' $d;
    }
} low_vowel_rasp;

# Give extra space to the base when a vowel hangs right over it
lookup hang_attach_spacing {
    ignore pos @H' @VOWEL_DESC' u16F91' @ASP;
do  for v = @VOWEL_DESC;
    for h = @H;
    let s = int(APx(v, "_HR") - APx(v, "_HD")) - ADVx(h) + APx(h, "S");
    {
        #pos $h' $v' u16F91' @ASP' $s;
        pos $h' $s $v' u16F91';
    }
} hang_attach_spacing;

# Shift a single vowel to align RHS to RHS of aspiration
do  for w = @pureW;
    let bw = APx(w, 'W') - ADVx(w);
    let aw = ADVx("u16F51");
    let fn = lambda m: max(bw, aw - APx(m, "W"));
    let lname = "ralignW_" + w;
    let e = makerules(lname, 'pureWB', fn, "pos {g} <{s:d} 0 {s:d} 0>", cname="indent");
    if needslookup('pureWB', fn) and e != "";
    {
        lookup $lname {
            $e;
        } $lname;
    }

do  for w = @pureW;
    let bw = APx(w, 'F') - ADVx(w);
    let aw = ADVx("u16F51");
    let fn = lambda m: max(bw, aw - APx(m, "F"));
    let lname = "ralignF_" + w;
    let e = makerules(lname, 'pureWB', fn, "pos {g} <{s:d} 0 {s:d} 0>", cname="indent");
    if needslookup('pureWB', fn) and e != "";
    {
        lookup $lname {
            $e;
        } $lname;
    }

lookup right_align_to_asp_W {
do  for w = @pureW;
    let bw = APx(w, 'W') - ADVx(w);
    let aw = ADVx("u16F51");
    let fn = lambda m: max(bw, aw - APx(m, "W"));
    let lname = getlname("ralignW_" + w, cname="indent");
    if needslookup('pureWB', fn);
    {
        pos $w' @ASPMARKS' @WB' lookup $lname u16F8F;
    }
} right_align_to_asp_W;

lookup right_align_to_asp_F {
    ignore pos @F @ASPMARKS @FB [@FB @ALLTONES];
do  for w = @pureW;
    let bw = APx(w, 'F') - ADVx(w);
    let aw = ADVx("u16F51");
    let fn = lambda m: max(bw, aw - APx(m, "F"));
    let lname = getlname("ralignF_" + w, cname="indent");
    if needslookup('pureWB', fn);
    {
        pos $w' @ASPMARKS' @WB' lookup $lname;
    }
} right_align_to_asp_F;

feature kern {
  script DFLT;
    language dflt;
        lookup vowel_attach_basic;
        lookup vowel_attach_top;
        lookup aspirations;
        lookup headfoot_vowels;
        lookup asp_hf_attach_forward;
        lookup asp_hf_attach_left;
        lookup asp_fix_attach;
        lookup spacekern_headfoot;
        # lookup narr_headfoot;
        lookup low_vowel_wasp;
        lookup hang_attach_spacing;
    language YNA exclude_dflt;
        lookup vowel_attach_yna;
        lookup vowel_attach_top;
        lookup aspirations_r;
        lookup headfoot_vowels;
        lookup asp_hf_attach_right;
        lookup asp_fix_attach;
        lookup spacekern_headfoot;
        # lookup narr_headfoot;
        lookup low_vowel_rasp;
        lookup hang_attach_spacing;
        lookup right_align_to_asp_W;
        lookup right_align_to_asp_F;
    language SFM exclude_dflt;
        lookup vowel_attach_sfm;
        lookup vowel_attach_topright;
        lookup aspirations_r;
        lookup headfoot_vowels;
        lookup asp_hf_attach_right;
        lookup asp_fix_attach;
        lookup spacekern_headfoot;
        # lookup narr_headfoot;
        lookup low_vowel_rasp;
        lookup hang_attach_spacing;
    language HMDD exclude_dflt;
        lookup vowel_attach_hmdd;
        lookup vowel_attach_topright;
        lookup aspirations_r;
        lookup headfoot_vowels;
        lookup asp_hf_attach_right;
        lookup spacekern_headfoot;
        # lookup narr_headfoot;
        lookup low_vowel_rasp;
        lookup hang_attach_spacing;
    language HMD exclude_dflt;
        lookup vowel_attach_hmd;
        lookup vowel_attach_top;
        lookup aspirations;
        lookup headfoot_vowels;
        lookup asp_hf_attach_forward;
        lookup asp_hf_attach_left;
        lookup asp_fix_attach;
        lookup space_waist_kern_W;
        lookup spacekern_headfoot;
        # lookup narr_headfoot;
        lookup low_vowel_wasp;
        lookup hang_attach_spacing;
        lookup right_align_to_asp_F;
    language HMZ exclude_dflt;
        lookup vowel_attach_hmz;
        lookup vowel_attach_top;
        lookup aspirations;
        lookup headfoot_vowels;
        lookup asp_hf_attach_forward;
        lookup asp_hf_attach_left;
        lookup asp_fix_attach;
        lookup space_waist_kern_W;
        lookup spacekern_headfoot;
        # lookup narr_headfoot;
        lookup low_vowel_wasp;
        lookup hang_attach_spacing;
    language YWQA exclude_dflt;
        lookup vowel_attach_basic;
        lookup vowel_attach_top;
        lookup aspirations;
        lookup headfoot_vowels;
        lookup asp_hf_attach_forward;
        lookup asp_hf_attach_left;
        lookup asp_fix_attach;
        lookup spacekern_headfoot;
        # lookup narr_headfoot;
        lookup low_vowel_wasp;
        lookup hang_attach_spacing;
    language LPO exclude_dflt;
        lookup vowel_attach_basic;
        lookup vowel_attach_top;
        lookup aspirations;
        lookup headfoot_vowels;
        lookup asp_hf_attach_right;
        lookup asp_fix_attach;
        lookup spacekern_headfoot;
        # lookup narr_headfoot;
        lookup low_vowel_wasp;
        lookup hang_attach_spacing;
    language YGP exclude_dflt;
        lookup vowel_attach_ygp;
        lookup vowel_attach_topright;
        lookup aspirations_r;
        lookup asp_hf_attach_right;
        lookup headfoot_vowels;
        lookup spacekern_headfoot;
        # lookup narr_headfoot;
        lookup low_vowel_rasp;
        lookup hang_attach_spacing;
} kern;

table GDEF {
    GlyphClassDef @GDEF_bases, , @GDEF_marks, ;
} GDEF;
